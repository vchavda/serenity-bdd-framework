================================================================================================================
This frmework is selenium bdd - it provides wrapper classes for selenium/rest assured. with Selenium you extend your classes
from PagePbject and you can use the wrapper classees.
- no need to worry about closing browsers, time outs etc
- provides a nice report with screen shots
I have integrated Spring so that we can have internal applcation properties, and also we ca use autowire for some classes which
we could to share data amongst step definitions

================================================================================================================
Architecture
================================================================================================================
To get the serenityBDD framework working please note the points below:
1. use the pom.xml which has all the dependencies needed.
2. Need a runner class (I have created one called RunCukesIT under a runner package but u can name it whatever you want.
   But note you need to update the includes part of the pom.xml so it know where to find the runner class. In this case i have
   entered: 	<include>**/runner/**/*.java</include> which says run any classes under the runner package


   				<configuration>
   					<includes>

   						<!-- <include>**/testcases/Parameterization.java</include> -->
   						<include>**/runner/**/*.java</include>
   						<include>**/runner/*.java</include>

   					</includes>

   					<parallel>classes</parallel>
   					<threadCount>2</threadCount>
   					<forkCount>2C</forkCount>
   				</configuration>


3. Add the location of the feature file in your runner class and glue it your steps @CucumberOptions(features = "src/test/resources/features", glue="Steps")


4. you need to specify the drivers - I have put them under resources/drivers/windows/  - this hierarchy also needs to be mimiced in
   the serenity.conf file:

    drivers {

	   windows {
	       webdriver.chrome.driver=src/test/resources/drivers/windows/chromedriver.exe
	       webdriver.gecko.driver=src/test/resources/drivers/windows/geckodriver.exe
	}


5. you can use properties here or serenity.properties file. I have added serenity.take.screenshots=AFTER_EACH_STEP property in the
   serenity.conf file.
   In the serenity.properties file I have added the baseurl webdriver.base.url=https://automationintesting.com/selenium/testpage/
   This is what url it will open as default.
   To open the url you must call the .open() method (see FormSteps class  testpageFormPage.open();)
   note no webdriver was mentioned.

   to run on different browsers you can just mention it context:
   mvn clean verify  -Dcontext=firefox -Dwebdriver.driver=firefox
   mvn clean verify  -Dcontext=chrome -Dwebdriver.driver=chrome
   SerenityBDD will find the correct driver defined by the path in your serenity.conf file and open the browser as per your
   command line context.

6. To use the selenium wrap-around methods the class must extend PageObject and use the @Runwith annotation as per FormPage
    @RunWith(SerenityRunner.class)
    public class FormPage extends PageObject {
    }
7. The page object model I have Implemented is feature - > Step definition - > page (this extends pageobject)


================================================================================================================
To run on different urls ie could have different enviroments test, system etc.
================================================================================================================
You need to define he different enviroments in your serenity.conf file

environments {

        default {
                webdriver.base.url = "https://automationintesting.com/selenium/testpage/"
        }
        adv {
                webdriver.base.url = "https://testpages.herokuapp.com/styled/index.html"
        }
        prod {
                #production environemt
        }
        test{
                #test environment
        }
}

you then specify this in your command line as -Denvironment=adv if you dont specify this then it will use the default


================================================================================================================
To execute from maven command
================================================================================================================
#runs all the tests
mvn clean verify  -Dcontext=chrome -Dwebdriver.driver=chrome
#runs specific tag
mvn clean verify  -Dcontext=chrome -Dwebdriver.driver=chrome -Dcucumber.options="--tags @forms"
#runs specific tag using a specific env (see serenity.conf)
#runs the adv feature with a differnent url configured in the serinity.conf file.
mvn clean verify  -Dcontext=chrome -Dwebdriver.driver=chrome -Dcucumber.options="--tags @frame" -Denvironment=adv
mvn clean verify serenity:aggregate -Dcucumber.options="--tags @restassured"

================================================================================================================
To Debug
================================================================================================================
Right click on feature file and click 'Debug' - this will create a config which you can then edit and add the command line parameters
(see config.JPG)

================================================================================================================
https://natritmeyer.com/howto/cucumber-jvm-dependency-injection-with-spring/
Adding Spring to the framework - we can't the usual way we (as above) need to follow: https://www.baeldung.com/serenity-spring-jbehave
For this reason not adding spring with serenity.
I have found a way around and that is:
1. add spring dependencies to POM (verion is important) see "Adding Spring Assured dependencies" comment in pom file.
2. add appconfig class under package config (test/java)
3. add application properties file (root of resources folder)
4. add @ContextConfiguration(classes = {Appconfig.class}) to the step cass (AdvStep)
5. You can now use autowire/property value etc...
6. just remember to use @ContextConfiguration(classes = {Appconfig.class}) at the top of the class definition for it to work.
================================================================================================================